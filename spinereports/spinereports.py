import argparse
import multiprocessing as mp
from pathlib import Path
import textwrap
import os, importlib

import totalspineseg.resources as resources

from spinereports.utils.generate_reports import generate_reports
from spinereports.utils.measure_seg import measure_seg_mp


def main():
    # Description and arguments
    parser = argparse.ArgumentParser(
        description=' '.join(f'''
            This script processes the segmentation folders generated by totalspineseg to generate a reports.
            It requires files to follow the BIDS naming conventions. 
        '''.split()),
        epilog=textwrap.dedent('''
            Examples:
            spinereports -t test_group_folder -c control_group_folder -o reports
        '''),
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        '--test-dir', '-t', type=Path, required=True,
        help='The output folder where totalspineseg outputs are located for the test group (required).'
    )
    parser.add_argument(
        '--control-dir', '-c', type=Path, required=True,
        help='The output folder where totalspineseg outputs are located for the control group (required).'
    )
    parser.add_argument(
        '--ofolder', '-o', type=Path, required=True,
        help='The folder where reports will be saved (required).'
    )
    parser.add_argument(
        '--prefix', '-p', type=str, default='',
        help='File prefix to work on.'
    )
    parser.add_argument(
        '--image-suffix', type=str, default='_0000',
        help='Image suffix, defaults to "_0000".'
    )
    parser.add_argument(
        '--seg-suffix', type=str, default='',
        help='Segmentation suffix, defaults to "".'
    )
    parser.add_argument(
        '--label-suffix', type=str, default='',
        help='Label suffix, defaults to "".'
    )
    parser.add_argument(
        '--max-workers', '-w', type=int, default=mp.cpu_count(),
        help='Max worker to run in parallel proccess, defaults to multiprocessing.cpu_count().'
    )
    parser.add_argument(
        '--quiet', '-q', action="store_true", default=False,
        help='Do not display inputs and progress bar, defaults to false (display).'
    )

    # Parse the command-line arguments
    args = parser.parse_args()

    # Get the command-line argument values
    test_path = args.test_dir
    control_path = args.control_dir
    ofolder = args.ofolder
    prefix = args.prefix
    image_suffix = args.image_suffix
    seg_suffix = args.seg_suffix
    label_suffix = args.label_suffix
    max_workers = args.max_workers
    quiet = args.quiet

    # Use default mapping path
    resources_path = importlib.resources.files(resources)
    mapping_path = os.path.join(resources_path, 'labels_maps/tss_map.json')

    # Print the argument values if not quiet
    if not quiet:
        print(textwrap.dedent(f'''
            Running {Path(__file__).stem} with the following params:
            test_path = "{test_path}"
            control_path = "{control_path}"
            ofolder = "{ofolder}"
            prefix = "{prefix}"
            image_suffix = "{image_suffix}"
            seg_suffix = "{seg_suffix}"
            label_suffix = "{label_suffix}"
            mapping_path = "{mapping_path}"
            max_workers = {max_workers}
            quiet = {quiet}
        '''))
    
    # Run spinereports
    run_spinereports(
        test_path=test_path,
        control_path=control_path,
        ofolder=ofolder,
        prefix=prefix,
        image_suffix=image_suffix,
        seg_suffix=seg_suffix,
        label_suffix=label_suffix,
        mapping_path=mapping_path,
        max_workers=max_workers,
        quiet=quiet
    )

def run_spinereports(
        test_path: Path,
        control_path: Path,
        ofolder: Path,
        prefix: str,
        image_suffix: str,
        seg_suffix: str,
        label_suffix: str,
        mapping_path: str,
        max_workers: int,
        quiet: bool
    ):

    # Check if paths exists
    if not control_path.exists():
        raise FileNotFoundError(f'Control directory "{control_path}" does not exist.')
    if not test_path.exists():
        raise FileNotFoundError(f'Test directory "{test_path}" does not exist.')

    # Measure segmentations if not already done
    test_metrics_path = test_path / "metrics_output"
    control_metrics_path = control_path / "metrics_output"
    if not test_metrics_path.exists():
        if not quiet: print(f'\nMeasuring segmentations for test group in "{test_path}"...')
        measure_seg_mp(
            images_path=test_path / "input",
            segs_path=test_path / "step2_output",
            labels_path=test_path / "step1_levels",
            ofolder_path=test_metrics_path,
            prefix=prefix,
            image_suffix=image_suffix,
            seg_suffix=seg_suffix,
            label_suffix=label_suffix,
            mapping_path=mapping_path,
            max_workers=max_workers,
            quiet=quiet,
        )
    if not control_metrics_path.exists():
        if not quiet: print(f'\nMeasuring segmentations for control group in "{control_path}"...')
        measure_seg_mp(
            images_path=control_path / "input",
            segs_path=control_path / "step2_output",
            labels_path=control_path / "step1_levels",
            ofolder_path=control_metrics_path,
            prefix=prefix,
            image_suffix=image_suffix,
            seg_suffix=seg_suffix,
            label_suffix=label_suffix,
            mapping_path=mapping_path,
            max_workers=max_workers,
            quiet=quiet,
        )
    
    # Generate reports
    if not quiet: print(f'\nGenerating reports in "{ofolder}"...')
    generate_reports(
        test_path=test_metrics_path,
        control_path=control_metrics_path,
        ofolder_path=ofolder,
        max_workers=max_workers,
        quiet=quiet
    )

    if not quiet: print('Reports generation completed.')
